#ifdef VS 
 
precision highp float;
attribute vec3 position;
attribute vec3 normal;
uniform mat3 normalMatrix;
uniform mat4 modelViewMatrix;
uniform mat4 projectionMatrix;
varying vec3 fNormal;
varying vec3 fPosition;

void main()
{
  fNormal = normalize(normalMatrix * normal);
  vec4 pos = modelViewMatrix * vec4(position, 1.0);
  fPosition = pos.xyz;
  gl_Position = projectionMatrix * pos;
}
 
#else 
 
precision highp float;
uniform float time;
varying vec3 fPosition;
varying vec3 fNormal;

const float ambient_coeff = 0.25;
const float specular_coeff = 1.0;
const float specular_exp = 10.0;
const vec3 light_direction = vec3(-1.0,1.0,1.0);
const vec3 light_color = vec3(1.0, 1.0, 1.0);
const vec3 object_color = vec3(10.0, 10.0, 10.0);

void main()
{
  
  float theta = 10.0 * time;
  vec3 dir = vec3(sin(theta),0,cos(theta));
 
  vec3 l = normalize(light_direction);
  vec3 n = normalize(fNormal);
  vec3 e = normalize(-fPosition);
  vec3 h = normalize(e + l);
  vec3 ambient_color = ambient_coeff * object_color;
  vec3 specular_color = specular_coeff * pow(max(0.0, dot(n,h)), specular_exp) * light_color;
  
  gl_FragColor = vec4(ambient_color * specular_color * dir, 1.0);
}
 
#endif